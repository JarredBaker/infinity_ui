{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BinarySearchTree, useTrie, useAVLTree } from \"react-tree-vis\";\nimport { useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\n_c = CharDiv;\nexport const Home = props => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const orgChart = {\n    name: \"CEO\",\n    children: [{\n      name: \"Manager\",\n      attributes: {\n        department: \"Production\"\n      },\n      children: [{\n        name: \"Foreman\",\n        attributes: {\n          department: \"Fabrication\"\n        },\n        children: [{\n          name: \"Worker\"\n        }]\n      }, {\n        name: \"Foreman\",\n        attributes: {\n          department: \"Assembly\"\n        },\n        children: [{\n          name: \"Worker\"\n        }]\n      }]\n    }]\n  };\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const {\n      source,\n      target\n    } = linkDatum;\n    return orientation === \"horizontal\" ? `M${source.y},${source.x}L${target.y},${target.x}` : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  renderNodeWithCustomEvents = _ref => {\n    let {\n      nodeDatum,\n      toggleNode\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: \"0\",\n        height: \"120px\",\n        width: \"500px\",\n        y: \"-60px\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          title: nodeDatum.fullName,\n          className: \"elemental-node\",\n          style: nodeDatum.style,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            title: nodeDatum.fullName,\n            className: \"elemental-name\",\n            children: nodeDatum.shortName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this), nodeDatum.fullName === false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elemental-node--hover\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: nodeDatum.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this);\n  };\n\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(CharDiv, {\n      children: /*#__PURE__*/_jsxDEV(Tree // rootNodeClassName=\"node__root\"\n      // branchNodeClassName=\"node__branch\"\n      // leafNodeClassName=\"node__leaf\"\n      , {\n        renderCustomNodeElement: rd3tProps => this.renderNodeWithCustomEvents({ ...rd3tProps\n        }),\n        orientation: \"verticle\",\n        data: orgChart,\n        pathFunc: straightPathFunc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c2 = Home;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CharDiv\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","styled","BinarySearchTree","useTrie","useAVLTree","useState","Tree","CharDiv","div","Home","props","orgChart","name","children","attributes","department","straightPathFunc","linkDatum","orientation","source","target","y","x","renderNodeWithCustomEvents","nodeDatum","toggleNode","fullName","style","shortName","rd3tProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,gBAAT,EAA2BC,OAA3B,EAAoCC,UAApC,QAAsD,gBAAtD;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,OAAO,WAAP;;AAEA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;KAAMD,O;AAqBN,OAAO,MAAME,IAAI,GAAIC,KAAD,IAAW;AAC7B;AACA;AACA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAE,KADS;AAEfC,IAAAA,QAAQ,EAAE,CACR;AACED,MAAAA,IAAI,EAAE,SADR;AAEEE,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE;AADF,OAFd;AAKEF,MAAAA,QAAQ,EAAE,CACR;AACED,QAAAA,IAAI,EAAE,SADR;AAEEE,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAE;AADF,SAFd;AAKEF,QAAAA,QAAQ,EAAE,CACR;AACED,UAAAA,IAAI,EAAE;AADR,SADQ;AALZ,OADQ,EAYR;AACEA,QAAAA,IAAI,EAAE,SADR;AAEEE,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAE;AADF,SAFd;AAKEF,QAAAA,QAAQ,EAAE,CACR;AACED,UAAAA,IAAI,EAAE;AADR,SADQ;AALZ,OAZQ;AALZ,KADQ;AAFK,GAAjB;;AAoCA,QAAMI,gBAAgB,GAAG,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACnD,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqBH,SAA3B;AACA,WAAOC,WAAW,KAAK,YAAhB,GACF,IAAGC,MAAM,CAACE,CAAE,IAAGF,MAAM,CAACG,CAAE,IAAGF,MAAM,CAACC,CAAE,IAAGD,MAAM,CAACE,CAAE,EAD9C,GAEF,IAAGH,MAAM,CAACG,CAAE,IAAGH,MAAM,CAACE,CAAE,IAAGD,MAAM,CAACE,CAAE,IAAGF,MAAM,CAACC,CAAE,EAFrD;AAGD,GALD;;AAOAE,EAAAA,0BAA0B,GAAG;AAAA,QAAC;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAD;AAAA,wBAC3B;AAAA,6BACE;AAAe,QAAA,CAAC,EAAC,GAAjB;AAAqB,QAAA,MAAM,EAAC,OAA5B;AAAoC,QAAA,KAAK,EAAC,OAA1C;AAAkD,QAAA,CAAC,EAAC,OAApD;AAAA,+BACE;AACE,UAAA,KAAK,EAAED,SAAS,CAACE,QADnB;AAEE,UAAA,SAAS,EAAC,gBAFZ;AAGE,UAAA,KAAK,EAAEF,SAAS,CAACG,KAHnB;AAAA,kCAKE;AAAM,YAAA,KAAK,EAAEH,SAAS,CAACE,QAAvB;AAAiC,YAAA,SAAS,EAAC,gBAA3C;AAAA,sBACGF,SAAS,CAACI;AADb;AAAA;AAAA;AAAA;AAAA,kBALF,EAQGJ,SAAS,CAACE,QAAV,KAAuB,KAAvB,iBACC;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,mCACE;AAAA,wBAAOF,SAAS,CAACE;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAD2B;AAAA,GAA7B;;AAqBA;AAAA;AACE;AACA,YAAC,OAAD;AAAA,6BACE,QAAC,IAAD,CACE;AACA;AACA;AAHF;AAIE,QAAA,uBAAuB,EAAGG,SAAD,IACvB,KAAKN,0BAAL,CAAgC,EAAE,GAAGM;AAAL,SAAhC,CALJ;AAOE,QAAA,WAAW,EAAC,UAPd;AAQE,QAAA,IAAI,EAAElB,QARR;AASE,QAAA,QAAQ,EAAEK;AATZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAgBD,CAnFM;MAAMP,I","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { BinarySearchTree, useTrie, useAVLTree } from \"react-tree-vis\";\nimport { useState } from \"react\";\n\nimport Tree from \"react-d3-tree\";\n\nimport \"./App.css\";\n\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\nexport const Home = (props) => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const orgChart = {\n    name: \"CEO\",\n    children: [\n      {\n        name: \"Manager\",\n        attributes: {\n          department: \"Production\",\n        },\n        children: [\n          {\n            name: \"Foreman\",\n            attributes: {\n              department: \"Fabrication\",\n            },\n            children: [\n              {\n                name: \"Worker\",\n              },\n            ],\n          },\n          {\n            name: \"Foreman\",\n            attributes: {\n              department: \"Assembly\",\n            },\n            children: [\n              {\n                name: \"Worker\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const { source, target } = linkDatum;\n    return orientation === \"horizontal\"\n      ? `M${source.y},${source.x}L${target.y},${target.x}`\n      : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  renderNodeWithCustomEvents = ({ nodeDatum, toggleNode }) => (\n    <g>\n      <foreignObject x=\"0\" height=\"120px\" width=\"500px\" y=\"-60px\">\n        <div\n          title={nodeDatum.fullName}\n          className=\"elemental-node\"\n          style={nodeDatum.style}\n        >\n          <span title={nodeDatum.fullName} className=\"elemental-name\">\n            {nodeDatum.shortName}\n          </span>\n          {nodeDatum.fullName === false && (\n            <div className=\"elemental-node--hover\">\n              <span>{nodeDatum.fullName}</span>\n            </div>\n          )}\n        </div>\n      </foreignObject>\n    </g>\n  );\n\n  return (\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    <CharDiv>\n      <Tree\n        // rootNodeClassName=\"node__root\"\n        // branchNodeClassName=\"node__branch\"\n        // leafNodeClassName=\"node__leaf\"\n        renderCustomNodeElement={(rd3tProps) =>\n          this.renderNodeWithCustomEvents({ ...rd3tProps })\n        }\n        orientation=\"verticle\"\n        data={orgChart}\n        pathFunc={straightPathFunc}\n      />\n    </CharDiv>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}