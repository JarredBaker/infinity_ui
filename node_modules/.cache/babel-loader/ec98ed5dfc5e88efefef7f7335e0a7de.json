{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { BinarySearchTree, useTrie, useAVLTree } from \"react-tree-vis\";\nimport { useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\nbackground-color: red;\n\n.node__root > circle {\n    fill: red;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\n_c = CharDiv;\nexport const Home = props => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const orgChart = {\n    name: \"CEO\",\n    children: [{\n      name: \"Manager\",\n      attributes: {\n        department: \"Production\"\n      },\n      children: [{\n        name: \"Foreman\",\n        attributes: {\n          department: \"Fabrication\"\n        },\n        children: [{\n          name: \"Worker\"\n        }]\n      }, {\n        name: \"Foreman\",\n        attributes: {\n          department: \"Assembly\"\n        },\n        children: [{\n          name: \"Worker\"\n        }]\n      }]\n    }]\n  };\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(CharDiv, {\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: orgChart\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c2 = Home;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CharDiv\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","styled","BinarySearchTree","useTrie","useAVLTree","useState","Tree","CharDiv","div","Home","props","orgChart","name","children","attributes","department"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,gBAAT,EAA2BC,OAA3B,EAAoCC,UAApC,QAAsD,gBAAtD;AACA,SAASC,QAAT,QAAyB,OAAzB;AAEA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;KAAMD,O;AAoBN,OAAO,MAAME,IAAI,GAAIC,KAAD,IAAW;AAC7B;AACA;AACA,QAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAE,KADS;AAEfC,IAAAA,QAAQ,EAAE,CACR;AACED,MAAAA,IAAI,EAAE,SADR;AAEEE,MAAAA,UAAU,EAAE;AACVC,QAAAA,UAAU,EAAE;AADF,OAFd;AAKEF,MAAAA,QAAQ,EAAE,CACR;AACED,QAAAA,IAAI,EAAE,SADR;AAEEE,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAE;AADF,SAFd;AAKEF,QAAAA,QAAQ,EAAE,CACR;AACED,UAAAA,IAAI,EAAE;AADR,SADQ;AALZ,OADQ,EAYR;AACEA,QAAAA,IAAI,EAAE,SADR;AAEEE,QAAAA,UAAU,EAAE;AACVC,UAAAA,UAAU,EAAE;AADF,SAFd;AAKEF,QAAAA,QAAQ,EAAE,CACR;AACED,UAAAA,IAAI,EAAE;AADR,SADQ;AALZ,OAZQ;AALZ,KADQ;AAFK,GAAjB;AAmCA;AAAA;AACE;AACA,YAAC,OAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAED;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAMD,CA5CM;MAAMF,I","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { BinarySearchTree, useTrie, useAVLTree } from \"react-tree-vis\";\nimport { useState } from \"react\";\n\nimport Tree from \"react-d3-tree\";\n\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\nbackground-color: red;\n\n.node__root > circle {\n    fill: red;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\nexport const Home = (props) => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const orgChart = {\n    name: \"CEO\",\n    children: [\n      {\n        name: \"Manager\",\n        attributes: {\n          department: \"Production\",\n        },\n        children: [\n          {\n            name: \"Foreman\",\n            attributes: {\n              department: \"Fabrication\",\n            },\n            children: [\n              {\n                name: \"Worker\",\n              },\n            ],\n          },\n          {\n            name: \"Foreman\",\n            attributes: {\n              department: \"Assembly\",\n            },\n            children: [\n              {\n                name: \"Worker\",\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  };\n  return (\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    <CharDiv>\n      <Tree data={orgChart} />\n    </CharDiv>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}