{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/About.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WarpDiv = styled.div`\n  padding: 90px;\n`;\n_c = WarpDiv;\nexport default function About(_ref) {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const [binaryCommision, setBinaryCommision] = useState(0);\n  const [lbv, setLbv] = useState(0);\n  const [rbv, setRbv] = useState(0);\n  useEffect(async () => {\n    const binaryData = await getBinaryTree();\n    consolidateApplicationOrders(binaryData);\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  async function getOrders() {\n    return fetch(\"http://localhost:8080/api/commission_by_id\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  const consolidateApplicationOrders = async binTree => {\n    const getOrderData = await getOrders();\n    console.log(\"THE ORDERS TABLE: \" + JSON.stringify(getOrderData));\n    console.log(\"BIN PASSED: \" + JSON.stringify(binTree));\n\n    function getKeyByValue(object, value) {\n      return Object.keys(object).find(key => object[key] === value);\n    }\n\n    for (let i = 0; i < getOrderData.length; i++) {\n      if (getOrderData[i].user_id !== 1) {\n        console.log(\"ID TO PASS: \" + getOrderData[i].id);\n        const userPosition = getKeyByValue(binTree, getOrderData[i].id.toString());\n\n        if (userPosition !== undefined && userPosition.charAt(0) === '1') {\n          console.log(\"L \" + getOrderData[i].volume);\n          setLbv(lbv + getOrderData[i].volume);\n        } else if (userPosition !== undefined && userPosition.charAt(0) === '2') {\n          console.log(\"R \" + getOrderData[i].volume);\n          setRbv(rbv + parseInt(getOrderData[i].volume));\n        }\n      }\n    }\n  };\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = {\n      user_1: {}\n    };\n    const data = await getTree();\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        let placementStr = \"\";\n\n        if (data[j].position === \"L\") {\n          placementStr = placementStr + \".1\";\n        } else if (data[j].position === \"R\") {\n          placementStr = placementStr + \".2\";\n        }\n\n        let curUIDDrop = data[j].father;\n\n        while (curUIDDrop !== 1 && curUIDDrop !== 0 && curUIDDrop !== -1) {\n          for (let k = 1; k < data.length; k++) {\n            if (data[k].position !== null && data[k].father !== -1) {\n              if (data[k].id === curUIDDrop) {\n                if (data[k].position === \"L\") {\n                  placementStr = placementStr + \".1\";\n                } else if (data[k].position === \"R\") {\n                  placementStr = placementStr + \".2\";\n                }\n\n                curUIDDrop = data[k].father;\n                continue;\n              }\n            }\n          }\n        }\n\n        if (placementStr.charAt(0) == \".\") {\n          placementStr = placementStr.substring(1, placementStr.length);\n        }\n\n        placementStr = reverse(placementStr);\n\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        if (placementStr.length > 0) {\n          constructTree[\"user_1\"][placementStr] = data[j].id.toString();\n        }\n      }\n\n      const ordered = Object.keys(constructTree[\"user_1\"]).sort().reduce((obj, key) => {\n        obj[key] = constructTree[\"user_1\"][key];\n        return obj;\n      }, {});\n      console.log(\"ORDERED BIN TREE : \" + JSON.stringify(ordered));\n      return ordered;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(WarpDiv, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User_1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Binary Commission: \", binaryCommision]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"LBV: \", lbv]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"RBV: \", rbv]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n\n_s(About, \"kStm/Qg+QfQ2bcx9YX/XR8rMr5s=\");\n\n_c2 = About;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WarpDiv\");\n$RefreshReg$(_c2, \"About\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/About.js"],"names":["React","useState","useEffect","styled","WarpDiv","div","About","token","binaryCommision","setBinaryCommision","lbv","setLbv","rbv","setRbv","binaryData","getBinaryTree","consolidateApplicationOrders","getTree","fetch","method","headers","Authorization","then","data","json","getOrders","binTree","getOrderData","console","log","JSON","stringify","getKeyByValue","object","value","Object","keys","find","key","i","length","user_id","id","userPosition","toString","undefined","charAt","volume","parseInt","constructTree","user_1","Array","isArray","j","placementStr","position","curUIDDrop","father","k","substring","reverse","s","split","join","ordered","sort","reduce","obj"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst WarpDiv = styled.div`\n  padding: 90px;\n`;\n\nexport default function About({ token }) {\n  const [binaryCommision, setBinaryCommision] = useState(0);\n  const [lbv, setLbv] = useState(0);\n  const [rbv, setRbv] = useState(0);\n\n  useEffect(async () => {\n    const binaryData = await getBinaryTree();\n    consolidateApplicationOrders(binaryData);\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  async function getOrders() {\n    return fetch(\"http://localhost:8080/api/commission_by_id\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  const consolidateApplicationOrders = async (binTree) => {\n    const getOrderData = await getOrders();\n\n    console.log(\"THE ORDERS TABLE: \" + JSON.stringify(getOrderData));\n    console.log(\"BIN PASSED: \" + JSON.stringify(binTree));\n\n    function getKeyByValue(object, value) {\n      return Object.keys(object).find((key) => object[key] === value);\n    }\n\n    for (let i = 0; i < getOrderData.length; i++) {\n      if (getOrderData[i].user_id !== 1) {\n        console.log(\"ID TO PASS: \" + getOrderData[i].id);\n        const userPosition = getKeyByValue(\n          binTree,\n          getOrderData[i].id.toString()\n        );\n\n        if (userPosition !== undefined && userPosition.charAt(0) === '1') {\n          console.log(\"L \" + getOrderData[i].volume);\n          setLbv(lbv + getOrderData[i].volume);\n        } else if (\n          userPosition !== undefined &&\n          userPosition.charAt(0) === '2'\n        ) {\n          console.log(\"R \" + getOrderData[i].volume);\n          setRbv(rbv + parseInt(getOrderData[i].volume));\n        }\n      }\n    }\n  };\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = { user_1: {} };\n    const data = await getTree();\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        let placementStr = \"\";\n\n        if (data[j].position === \"L\") {\n          placementStr = placementStr + \".1\";\n        } else if (data[j].position === \"R\") {\n          placementStr = placementStr + \".2\";\n        }\n\n        let curUIDDrop = data[j].father;\n\n        while (curUIDDrop !== 1 && curUIDDrop !== 0 && curUIDDrop !== -1) {\n          for (let k = 1; k < data.length; k++) {\n            if (data[k].position !== null && data[k].father !== -1) {\n              if (data[k].id === curUIDDrop) {\n                if (data[k].position === \"L\") {\n                  placementStr = placementStr + \".1\";\n                } else if (data[k].position === \"R\") {\n                  placementStr = placementStr + \".2\";\n                }\n                curUIDDrop = data[k].father;\n                continue;\n              }\n            }\n          }\n        }\n\n        if (placementStr.charAt(0) == \".\") {\n          placementStr = placementStr.substring(1, placementStr.length);\n        }\n\n        placementStr = reverse(placementStr);\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        if (placementStr.length > 0) {\n          constructTree[\"user_1\"][placementStr] = data[j].id.toString();\n        }\n      }\n\n      const ordered = Object.keys(constructTree[\"user_1\"])\n        .sort()\n        .reduce((obj, key) => {\n          obj[key] = constructTree[\"user_1\"][key];\n          return obj;\n        }, {});\n\n      console.log(\"ORDERED BIN TREE : \" + JSON.stringify(ordered));\n      return ordered;\n    }\n  };\n\n  return (\n    <WarpDiv>\n      <h1>User_1</h1>\n      <h2>Binary Commission: {binaryCommision}</h2>\n      <h3>LBV: {lbv}</h3>\n      <h3>RBV: {rbv}</h3>\n    </WarpDiv>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}