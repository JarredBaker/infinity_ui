{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\n\nasync function getTree() {\n  return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token.token,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Access-Control-Allow-Origin\": \"*\"\n    }\n  }).then(data => data.json());\n}\n\nconst getBinaryTree = async e => {\n  e.preventDefault();\n  let constructTree = {\n    eagleViewRequestDocument: {}\n  };\n  let unPlaced = [];\n  const data = await getTree();\n\n  if (Array.isArray(data)) {\n    for (let i = 1; i < data.length; i++) {\n      if (data[i - 1].position === \"0\") {\n        constructTree[\"eagleViewRequestDocument\"][\"1\"] = data[i - 1].user_name;\n      } else if (data[i - 1].position === \"L\") {\n        constructTree[\"eagleViewRequestDocument\"][data[i - 1].father + \".1\"] = data[i - 1].user_name;\n      } else if (data[i - 1].position === \"R\") {\n        constructTree[\"eagleViewRequestDocument\"][data[i - 1].father + \".2\"] = data[i - 1].user_name;\n      } else {\n        unPlaced.push(data[i - 1]);\n      }\n    }\n\n    console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n    console.log(\"UNPLACED : \" + JSON.stringify(unPlaced));\n  }\n};\n\nconst sizeData = {\n  x: 450,\n  y: 700\n};\nconst mapData = GraphData.populateGraphData(getBinaryTree());\nexport const Home = props => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const straightPathFunc = (linkDatum, orientation) => {\n    const {\n      source,\n      target\n    } = linkDatum;\n    return orientation === \"horizontal\" ? `M${source.y},${source.x}L${target.y},${target.x}` : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  const renderNodeWithCustomEvents = _ref => {\n    let {\n      nodeDatum,\n      toggleNode\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: \"0\",\n        height: \"120px\",\n        width: \"500px\",\n        y: \"-60px\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          title: nodeDatum.fullName,\n          className: \"elemental-node\",\n          style: nodeDatum.style,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            title: nodeDatum.fullName,\n            className: \"elemental-name\",\n            children: nodeDatum.shortName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), nodeDatum.fullName === false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elemental-node--hover\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: nodeDatum.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  };\n\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-legion\",\n        children: /*#__PURE__*/_jsxDEV(Legion, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph\",\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          data: mapData.graph,\n          renderCustomNodeElement: rd3tProps => renderNodeWithCustomEvents({ ...rd3tProps\n          }),\n          orientation: \"verticle\",\n          translate: mapData.translate,\n          zoom: mapData.defaultZoom,\n          pathFunc: straightPathFunc //\"eblow\"\n          ,\n          nodeSize: sizeData,\n          scaleExtent: {\n            min: mapData.defaultZoom,\n            max: 1\n          },\n          separation: {\n            siblings: 1,\n            nonSiblings: 1.5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","styled","Tree","GraphData","render","Legion","CharDiv","div","getTree","fetch","method","headers","Authorization","token","then","data","json","getBinaryTree","e","preventDefault","constructTree","eagleViewRequestDocument","unPlaced","Array","isArray","i","length","position","user_name","father","push","console","log","JSON","stringify","sizeData","x","y","mapData","populateGraphData","Home","props","straightPathFunc","linkDatum","orientation","source","target","renderNodeWithCustomEvents","nodeDatum","toggleNode","fullName","style","shortName","graph","rd3tProps","translate","defaultZoom","min","max","siblings","nonSiblings"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\n\nimport \"./App.css\";\n\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\n\nasync function getTree() {\n  return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n    method: \"GET\",\n    headers: {\n      Authorization: \"Bearer \" + token.token,\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"Access-Control-Allow-Origin\": \"*\",\n    },\n  }).then((data) => data.json());\n}\n\nconst getBinaryTree = async (e) => {\n  e.preventDefault();\n  let constructTree = { eagleViewRequestDocument: {} };\n  let unPlaced = [];\n\n  const data = await getTree();\n\n  if (Array.isArray(data)) {\n    for (let i = 1; i < data.length; i++) {\n      if (data[i - 1].position === \"0\") {\n        constructTree[\"eagleViewRequestDocument\"][\"1\"] =\n          data[i - 1].user_name;\n      } else if (data[i - 1].position === \"L\") {\n        constructTree[\"eagleViewRequestDocument\"][\n          data[i - 1].father + \".1\"\n        ] = data[i - 1].user_name;\n      } else if (data[i - 1].position === \"R\") {\n        constructTree[\"eagleViewRequestDocument\"][\n          data[i - 1].father + \".2\"\n        ] = data[i - 1].user_name;\n      } else {\n        unPlaced.push(data[i - 1]);\n      }\n    }\n\n    console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n    console.log(\"UNPLACED : \" + JSON.stringify(unPlaced));\n  }\n};\n\nconst sizeData = { x: 450, y: 700 };\nconst mapData = GraphData.populateGraphData(getBinaryTree());\n\nexport const Home = (props) => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const { source, target } = linkDatum;\n    return orientation === \"horizontal\"\n      ? `M${source.y},${source.x}L${target.y},${target.x}`\n      : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  const renderNodeWithCustomEvents = ({ nodeDatum, toggleNode }) => {\n    return (\n      <g>\n        <foreignObject x=\"0\" height=\"120px\" width=\"500px\" y=\"-60px\">\n          <div\n            title={nodeDatum.fullName}\n            className=\"elemental-node\"\n            style={nodeDatum.style}\n          >\n            <span title={nodeDatum.fullName} className=\"elemental-name\">\n              {nodeDatum.shortName}\n            </span>\n            {nodeDatum.fullName === false && (\n              <div className=\"elemental-node--hover\">\n                <span>{nodeDatum.fullName}</span>\n              </div>\n            )}\n          </div>\n        </foreignObject>\n      </g>\n    );\n  };\n\n  return (\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    <React.Fragment>\n      <div className=\"graph-legion\">\n        <Legion />\n      </div>\n      <div className=\"graph\">\n        <Tree\n          data={mapData.graph}\n          renderCustomNodeElement={(rd3tProps) =>\n            renderNodeWithCustomEvents({ ...rd3tProps })\n          }\n          orientation={\"verticle\"}\n          translate={mapData.translate}\n          zoom={mapData.defaultZoom}\n          pathFunc={straightPathFunc} //\"eblow\"\n          nodeSize={sizeData}\n          scaleExtent={{ min: mapData.defaultZoom, max: 1 }}\n          separation={{ siblings: 1, nonSiblings: 1.5 }}\n        />\n      </div>\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}