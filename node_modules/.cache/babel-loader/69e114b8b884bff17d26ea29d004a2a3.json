{"ast":null,"code":"export class GraphData {\n  static populateGraphData(jsonSchema) {\n    this.maxDepth = 1;\n    let legionNames = [];\n    let json = false ? jsonSchema : '{\"eagleViewRequestDocument\":{\"1\": \"user_1\",\"1.1\": \"user_2\",\"1.2\": \"user_3\",\"2\": \"user_2\",\"2.1\": \"user_4\",\"2.2\": \"user_5\"}}}';\n    json = JSON.parse(json);\n    let config = json[Object.keys(json)[0]];\n    let childData = [],\n        mapData = {};\n\n    for (var prop in config) {\n      let obj = config[prop]; // console.log(\"THE OBJ \" + obj);\n\n      this.setKeyData(prop, childData, obj, legionNames);\n    }\n\n    mapData = {\n      shortName: Object.keys(json)[0],\n      fullName: null,\n      children: childData,\n      style: {\n        background: this.colorCodes[0]\n      }\n    };\n    const translateData = {\n      x: window.innerWidth / 2 - 170,\n      y: window.innerHeight / 2 - 15\n    };\n    return {\n      graph: mapData,\n      defaultZoom: this.getDefaultZoom(Object.keys(config).length),\n      maxDepth: this.maxDepth,\n      legionData: legionNames,\n      translate: translateData\n    };\n  }\n\n  static setKeyData(dataKey, obj, value, legionNames) {\n    const key = dataKey.split(\".\");\n    const maxValue = key.length - 1;\n    let addChildData = false;\n\n    if (parseInt(key[0], 10) > this.maxDepth) {\n      this.maxDepth = parseInt(key[0], 10);\n    }\n\n    for (let i = 0; i < key.length; i++) {\n      // console.log(\"THE ID: \" + key[i]);\n      let id = parseInt(key[i], 10) - 1;\n\n      if (obj[id]) {\n        if (i === id) {\n          obj = obj[id].children;\n        } else {\n          obj = obj[id].children;\n          addChildData = true;\n        }\n      } else {\n        if (i === maxValue) {\n          if (addChildData) {\n            obj.push(this.getSubNodeData(value, parseInt(key[0], 10)));\n            addChildData = false;\n          } else {\n            if (maxValue === 0) legionNames.push(value);\n            obj[id] = this.getSubNodeData(value, parseInt(key[0], 10));\n          }\n        } else {\n          obj[id] = {};\n        }\n      }\n    }\n  }\n\n  static getSubNodeData(value, depth) {\n    const shortTitle = value.length >= 15 ? this.getShortName(value) : value;\n    const fullName = value.length >= 15 ? value : null;\n    return {\n      shortName: shortTitle,\n      fullName: fullName,\n      children: [],\n      style: {\n        background: this.colorCodes[depth] ? this.colorCodes[depth] : this.colorCodes[depth % this.colorCodes.length]\n      }\n    };\n  }\n\n  static getShortName(name, limit) {\n    return name.substr(0, limit || 15) + \"..\";\n  }\n\n  static getDefaultZoom(count) {\n    let factor = 1;\n    if (count <= 10) return factor;\n\n    if (count < 20) {\n      factor = 1;\n    } else if (count < 60) {\n      factor = 0.55;\n    } else if (count < 100) {\n      factor = 0.13;\n    } else if (count < 200) {\n      factor = 0.09;\n    } else {\n      factor = 0.04;\n    }\n\n    return factor;\n  }\n\n}\nGraphData.colorCodes = [\"#048A81\", \"#06D6A0\", \"#54C6EB\", \"#8A89C0\", \"#CA8DC6\", \"#FF93B3\", \"#FFA891\", \"#FFCD72\", \"#F9F871\" // \"#007482\",\n// \"#1E2946\",\n// \"#2F5744\",\n// \"#E33258\",\n// \"#D15828\",\n// \"#E04644\",\n// \"#F89200\"\n];\nGraphData.maxDepth = 1;","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/graphData.js"],"names":["GraphData","populateGraphData","jsonSchema","maxDepth","legionNames","json","JSON","parse","config","Object","keys","childData","mapData","prop","obj","setKeyData","shortName","fullName","children","style","background","colorCodes","translateData","x","window","innerWidth","y","innerHeight","graph","defaultZoom","getDefaultZoom","length","legionData","translate","dataKey","value","key","split","maxValue","addChildData","parseInt","i","id","push","getSubNodeData","depth","shortTitle","getShortName","name","limit","substr","count","factor"],"mappings":"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","sourcesContent":["export class GraphData {\n  static colorCodes = [\n    \"#048A81\",\n    \"#06D6A0\",\n    \"#54C6EB\",\n    \"#8A89C0\",\n    \"#CA8DC6\",\n    \"#FF93B3\",\n    \"#FFA891\",\n    \"#FFCD72\",\n    \"#F9F871\",\n    // \"#007482\",\n    // \"#1E2946\",\n    // \"#2F5744\",\n    // \"#E33258\",\n    // \"#D15828\",\n    // \"#E04644\",\n    // \"#F89200\"\n  ];\n  static maxDepth = 1;\n  static populateGraphData(jsonSchema) {\n    this.maxDepth = 1;\n    let legionNames = [];\n    let json = false\n      ? jsonSchema\n      : '{\"eagleViewRequestDocument\":{\"1\": \"user_1\",\"1.1\": \"user_2\",\"1.2\": \"user_3\",\"2\": \"user_2\",\"2.1\": \"user_4\",\"2.2\": \"user_5\"}}}';\n    json = JSON.parse(json);\n    let config = json[Object.keys(json)[0]];\n    let childData = [],\n      mapData = {};\n\n    for (var prop in config) {\n      let obj = config[prop];\n      // console.log(\"THE OBJ \" + obj);\n      this.setKeyData(prop, childData, obj, legionNames);\n    }\n    mapData = {\n      shortName: Object.keys(json)[0],\n      fullName: null,\n      children: childData,\n      style: {\n        background: this.colorCodes[0],\n      },\n    };\n    const translateData = {\n      x: window.innerWidth / 2 - 170,\n      y: window.innerHeight / 2 - 15,\n    };\n    return {\n      graph: mapData,\n      defaultZoom: this.getDefaultZoom(Object.keys(config).length),\n      maxDepth: this.maxDepth,\n      legionData: legionNames,\n      translate: translateData,\n    };\n  }\n\n  static setKeyData(dataKey, obj, value, legionNames) {\n    const key = dataKey.split(\".\");\n    const maxValue = key.length - 1;\n    let addChildData = false;\n    if (parseInt(key[0], 10) > this.maxDepth) {\n      this.maxDepth = parseInt(key[0], 10);\n    }\n    for (let i = 0; i < key.length; i++) {\n      // console.log(\"THE ID: \" + key[i]);\n      let id = parseInt(key[i], 10) - 1;\n      if (obj[id]) {\n        if (i === id) {\n          obj = obj[id].children;\n        } else {\n          obj = obj[id].children;\n          addChildData = true;\n        }\n      } else {\n        if (i === maxValue) {\n          if (addChildData) {\n            obj.push(this.getSubNodeData(value, parseInt(key[0], 10)));\n            addChildData = false;\n          } else {\n            if (maxValue === 0) legionNames.push(value);\n            obj[id] = this.getSubNodeData(value, parseInt(key[0], 10));\n          }\n        } else {\n          obj[id] = {};\n        }\n      }\n    }\n  }\n\n  static getSubNodeData(value, depth) {\n    const shortTitle = value.length >= 15 ? this.getShortName(value) : value;\n    const fullName = value.length >= 15 ? value : null;\n    return {\n      shortName: shortTitle,\n      fullName: fullName,\n      children: [],\n      style: {\n        background: this.colorCodes[depth]\n          ? this.colorCodes[depth]\n          : this.colorCodes[depth % this.colorCodes.length],\n      },\n    };\n  }\n\n  static getShortName(name, limit) {\n    return name.substr(0, limit || 15) + \"..\";\n  }\n\n  static getDefaultZoom(count) {\n    let factor = 1;\n    if (count <= 10) return factor;\n    if (count < 20) {\n      factor = 1;\n    } else if (count < 60) {\n      factor = 0.55;\n    } else if (count < 100) {\n      factor = 0.13;\n    } else if (count < 200) {\n      factor = 0.09;\n    } else {\n      factor = 0.04;\n    }\n    return factor;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}