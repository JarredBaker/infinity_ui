{"ast":null,"code":"export class GraphData {\n  static populateGraphData(jsonSchema) {\n    this.maxDepth = 1;\n    let legionNames = [];\n    let json = getBinaryTree();\n    json = JSON.parse(json);\n    let config = json[Object.keys(json)[0]];\n    let childData = [],\n        mapData = {};\n\n    for (var prop in config) {\n      let obj = config[prop];\n      this.setKeyData(prop, childData, obj, legionNames);\n    }\n\n    mapData = {\n      shortName: Object.keys(json)[0],\n      fullName: null,\n      children: childData,\n      style: {\n        background: this.colorCodes[0]\n      }\n    };\n    const translateData = {\n      x: window.innerWidth / 2 - 170,\n      y: window.innerHeight / 2 - 15\n    };\n    return {\n      graph: mapData,\n      defaultZoom: this.getDefaultZoom(Object.keys(config).length),\n      maxDepth: this.maxDepth,\n      legionData: legionNames,\n      translate: translateData\n    };\n  }\n\n  static async getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  static setKeyData(dataKey, obj, value, legionNames) {\n    const key = dataKey.split(\".\");\n    const maxValue = key.length - 1;\n    let addChildData = false;\n\n    if (parseInt(key[0], 10) > this.maxDepth) {\n      this.maxDepth = parseInt(key[0], 10);\n    }\n\n    for (let i = 0; i < key.length; i++) {\n      let id = parseInt(key[i], 10) - 1;\n\n      if (obj[id]) {\n        if (i === id) {\n          obj = obj[id].children;\n        } else {\n          obj = obj[id].children;\n          addChildData = true;\n        }\n      } else {\n        if (i === maxValue) {\n          if (addChildData) {\n            obj.push(this.getSubNodeData(value, parseInt(key[0], 10)));\n            addChildData = false;\n          } else {\n            if (maxValue === 0) legionNames.push(value);\n            obj[id] = this.getSubNodeData(value, parseInt(key[0], 10));\n          }\n        } else {\n          obj[id] = {};\n        }\n      }\n    }\n  }\n\n  static getSubNodeData(value, depth) {\n    const shortTitle = value.length >= 15 ? this.getShortName(value) : value;\n    const fullName = value.length >= 15 ? value : null;\n    return {\n      shortName: shortTitle,\n      fullName: fullName,\n      children: [],\n      style: {\n        background: this.colorCodes[depth] ? this.colorCodes[depth] : this.colorCodes[depth % this.colorCodes.length]\n      }\n    };\n  }\n\n  static getShortName(name, limit) {\n    return name.substr(0, limit || 15) + \"..\";\n  }\n\n  static getDefaultZoom(count) {\n    let factor = 1;\n    if (count <= 10) return factor;\n\n    if (count < 20) {\n      factor = 1;\n    } else if (count < 60) {\n      factor = 0.55;\n    } else if (count < 100) {\n      factor = 0.13;\n    } else if (count < 200) {\n      factor = 0.09;\n    } else {\n      factor = 0.04;\n    }\n\n    return factor;\n  }\n\n}\nGraphData.colorCodes = [//   \"#048A81\",\n//   \"#06D6A0\",\n//   \"#54C6EB\",\n//   \"#8A89C0\",\n//   \"#CA8DC6\",\n//   \"#FF93B3\",\n//   \"#FFA891\",\n//   \"#FFCD72\",\n//   \"#F9F871\"\n\"#007482\", \"#1E2946\", \"#2F5744\", \"#E33258\", \"#D15828\", \"#E04644\", \"#F89200\"];\nGraphData.maxDepth = 1;\n\nGraphData.getBinaryTree = async e => {\n  e.preventDefault();\n  let constructTree = {\n    eagleViewRequestDocument: {}\n  };\n  let unPlaced = [];\n  const data = await getTree();\n\n  if (Array.isArray(data)) {\n    for (let i = 1; i < data.length; i++) {\n      if (data[i - 1].position === \"0\") {\n        constructTree[\"eagleViewRequestDocument\"][\"1\"] = data[i - 1].user_name;\n      } else if (data[i - 1].position === \"L\") {\n        constructTree[\"eagleViewRequestDocument\"][data[i - 1].father + \".1\"] = data[i - 1].user_name;\n      } else if (data[i - 1].position === \"R\") {\n        constructTree[\"eagleViewRequestDocument\"][data[i - 1].father + \".2\"] = data[i - 1].user_name;\n      } else {\n        unPlaced.push(data[i - 1]);\n      }\n    }\n\n    console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n    console.log(\"UNPLACED : \" + JSON.stringify(unPlaced));\n  }\n};","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/graphData.js"],"names":["GraphData","populateGraphData","jsonSchema","maxDepth","legionNames","json","getBinaryTree","JSON","parse","config","Object","keys","childData","mapData","prop","obj","setKeyData","shortName","fullName","children","style","background","colorCodes","translateData","x","window","innerWidth","y","innerHeight","graph","defaultZoom","getDefaultZoom","length","legionData","translate","getTree","fetch","method","headers","Authorization","token","then","data","dataKey","value","key","split","maxValue","addChildData","parseInt","i","id","push","getSubNodeData","depth","shortTitle","getShortName","name","limit","substr","count","factor","e","preventDefault","constructTree","eagleViewRequestDocument","unPlaced","Array","isArray","position","user_name","father","console","log","stringify"],"mappings":"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","sourcesContent":["export class GraphData {\n    static colorCodes = [\n    //   \"#048A81\",\n    //   \"#06D6A0\",\n    //   \"#54C6EB\",\n    //   \"#8A89C0\",\n    //   \"#CA8DC6\",\n    //   \"#FF93B3\",\n    //   \"#FFA891\",\n    //   \"#FFCD72\",\n    //   \"#F9F871\"\n      \"#007482\",\n      \"#1E2946\",\n      \"#2F5744\",\n      \"#E33258\",\n      \"#D15828\",\n      \"#E04644\",\n      \"#F89200\"\n    ];\n    static maxDepth = 1;\n    static populateGraphData(jsonSchema) {\n      this.maxDepth = 1;\n      let legionNames = [];\n      let json = getBinaryTree()\n      json = JSON.parse(json);\n      let config = json[Object.keys(json)[0]];\n      let childData = [],\n        mapData = {};\n  \n      for (var prop in config) {\n        let obj = config[prop];\n        this.setKeyData(prop, childData, obj, legionNames);\n      }\n      mapData = {\n        shortName: Object.keys(json)[0],\n        fullName: null,\n        children: childData,\n        style: {\n          background: this.colorCodes[0]\n        }\n      };\n      const translateData = {\n        x: window.innerWidth / 2 - 170,\n        y: window.innerHeight / 2 - 15\n      };\n      return {\n        graph: mapData,\n        defaultZoom: this.getDefaultZoom(Object.keys(config).length),\n        maxDepth: this.maxDepth,\n        legionData: legionNames,\n        translate: translateData\n      };\n    }\n\n    static async getTree() {\n      return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + token.token,\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      }).then((data) => data.json());\n    }\n  \n    static getBinaryTree = async (e) => {\n      e.preventDefault();\n      let constructTree = { eagleViewRequestDocument: {} };\n      let unPlaced = [];\n  \n      const data = await getTree();\n  \n      if (Array.isArray(data)) {\n        for (let i = 1; i < data.length; i++) {\n          if (data[i - 1].position === \"0\") {\n            constructTree[\"eagleViewRequestDocument\"][\"1\"] =\n              data[i - 1].user_name;\n          } else if (data[i - 1].position === \"L\") {\n            constructTree[\"eagleViewRequestDocument\"][\n              data[i - 1].father + \".1\"\n            ] = data[i - 1].user_name;\n          } else if (data[i - 1].position === \"R\") {\n            constructTree[\"eagleViewRequestDocument\"][\n              data[i - 1].father + \".2\"\n            ] = data[i - 1].user_name;\n          } else {\n            unPlaced.push(data[i - 1]);\n          }\n        }\n  \n        console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n        console.log(\"UNPLACED : \" + JSON.stringify(unPlaced));\n      }\n    };\n  \n    static setKeyData(dataKey, obj, value, legionNames) {\n      const key = dataKey.split(\".\");\n      const maxValue = key.length - 1;\n      let addChildData = false;\n      if (parseInt(key[0], 10) > this.maxDepth) {\n        this.maxDepth = parseInt(key[0], 10);\n      }\n      for (let i = 0; i < key.length; i++) {\n        let id = parseInt(key[i], 10) - 1;\n        if (obj[id]) {\n          if (i === id) {\n            obj = obj[id].children;\n          } else {\n            obj = obj[id].children;\n            addChildData = true;\n          }\n        } else {\n          if (i === maxValue) {\n            if (addChildData) {\n              obj.push(this.getSubNodeData(value, parseInt(key[0], 10)));\n              addChildData = false;\n            } else {\n              if (maxValue === 0) legionNames.push(value);\n              obj[id] = this.getSubNodeData(value, parseInt(key[0], 10));\n            }\n          } else {\n            obj[id] = {};\n          }\n        }\n      }\n    }\n  \n    static getSubNodeData(value, depth) {\n      const shortTitle = value.length >= 15 ? this.getShortName(value) : value;\n      const fullName = value.length >= 15 ? value : null;\n      return {\n        shortName: shortTitle,\n        fullName: fullName,\n        children: [],\n        style: {\n          background: this.colorCodes[depth]\n            ? this.colorCodes[depth]\n            : this.colorCodes[depth % this.colorCodes.length]\n        }\n      };\n    }\n  \n    static getShortName(name, limit) {\n      return name.substr(0, limit || 15) + \"..\";\n    }\n  \n    static getDefaultZoom(count) {\n      let factor = 1;\n      if (count <= 10) return factor;\n      if (count < 20) {\n        factor = 1;\n      } else if (count < 60) {\n        factor = 0.55;\n      } else if (count < 100) {\n        factor = 0.13;\n      } else if (count < 200) {\n        factor = 0.09;\n      } else {\n        factor = 0.04;\n      }\n      return factor;\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}