{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharDiv = styled.div`\n  width: 100vw;\n  height: 100vh;\n  padding: 60px;\n`;\nconst sizeData = {\n  x: 450,\n  y: 700\n};\nexport const Home = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const [mapData, setMapData] = useState(null); // console.log(\"THE DATA \" + JSON.stringify(binaryData));\n\n  useEffect(async () => {\n    // const binaryData = await getBinaryTree();\n    const binaryData = await getBinaryTree(); // if (binaryData) {\n\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData))); // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = {\n      user_1: {}\n    };\n    let unPlaced = [];\n    const data = await getTree();\n    console.log(JSON.stringify(data));\n\n    if (Array.isArray(data)) {\n      for (let j = data.length; j > 0; j--) {\n        // let placementStr = \"\";\n        // if (data[j].position === \"L\") {\n        //   placementStr = placementStr + \".1\";\n        // } else if (data[j].position === \"R\") {\n        //   placementStr = placementStr + \".2\";\n        // }\n        // let curUIDDrop = data[j].father;\n        // console.log(\"USER: \" + data[j].user_name.toUpperCase());\n        // while (curUIDDrop !== 1 && curUIDDrop !== 0 && curUIDDrop !== -1) {\n        //   for (let k = 1; k < data.length; k++) {\n        //     if (data[k].position !== null && data[k].father !== -1) {\n        //       if (data[k].id === curUIDDrop) {\n        //         console.log(\"MATCH: \" + JSON.stringify(data[k]));\n        //         if (data[k].position === \"L\") {\n        //           placementStr = placementStr + \".1\";\n        //         } else if (data[k].position === \"R\") {\n        //           placementStr = placementStr + \".2\";\n        //         }\n        //         curUIDDrop = data[k].father;\n        //         continue;\n        //       }\n        //     }\n        //   }\n        // }\n        // if (placementStr.charAt(0) == \".\") {\n        //   placementStr = placementStr.substring(1, placementStr.length);\n        // }\n        // placementStr = reverse(placementStr);\n        // console.log(\"PLACE MENT: \" + placementStr);\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        let place = \"\";\n        let father = data[j].father;\n\n        if (data[j].position === \"L\") {\n          place = place + \".1\";\n        } else if (data[j].position === \"R\") {\n          place = place + \".2\";\n        }\n\n        while (father !== -1) {\n          let nexItem = data.find(x => x.id === data[j].father);\n\n          if (nexItem.position === \"L\") {\n            if (nexItem.father === 1) {\n              place = place + \"1\";\n            } else place = place + \".1\";\n          } else if (nexItem.position === \"R\") {\n            if (nexItem.father === 1) {\n              place = place + \"1\";\n            } else place = place + \"2\";\n          }\n        }\n\n        place = reverse(place);\n\n        if (place.length > 0) {\n          constructTree[\"user_1\"][place] = data[j].user_name.toUpperCase();\n        }\n      }\n\n      console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n      return constructTree;\n    }\n  };\n\n  const renderNodeWithCustomEvents = _ref2 => {\n    let {\n      nodeDatum,\n      toggleNode\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: \"-150px\",\n        height: \"500px\",\n        width: \"500px\",\n        y: \"-80px\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          title: nodeDatum.fullName,\n          className: \"elemental-node\",\n          style: nodeDatum.style,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            title: nodeDatum.fullName,\n            className: \"elemental-name\",\n            children: nodeDatum.shortName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), nodeDatum.fullName === false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elemental-node--hover\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: nodeDatum.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  };\n\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(React.Fragment, {\n      children: mapData !== null ?\n      /*#__PURE__*/\n      // <>\n      _jsxDEV(\"div\", {\n        className: \"graph\",\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          data: mapData.graph,\n          renderCustomNodeElement: rd3tProps => renderNodeWithCustomEvents({ ...rd3tProps\n          }),\n          orientation: \"verticle\",\n          translate: mapData.translate,\n          zoom: 0.2 // pathFunc={straightPathFunc} //\"eblow\"\n          ,\n          nodeSize: sizeData,\n          scaleExtent: {\n            min: 0.004,\n            max: 1\n          },\n          separation: {\n            siblings: 1,\n            nonSiblings: 1.5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this) :\n      /*#__PURE__*/\n      // </>\n      _jsxDEV(\"h2\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Home, \"tfr58apwqtG+o1X9ZCcq3mb3/DM=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","useEffect","useState","styled","Tree","GraphData","render","Legion","CharDiv","div","sizeData","x","y","Home","token","mapData","setMapData","binaryData","getBinaryTree","populateGraphData","JSON","stringify","getTree","fetch","method","headers","Authorization","then","data","json","constructTree","user_1","unPlaced","console","log","Array","isArray","j","length","reverse","s","split","join","place","father","position","nexItem","find","id","user_name","toUpperCase","renderNodeWithCustomEvents","nodeDatum","toggleNode","fullName","style","shortName","graph","rd3tProps","translate","min","max","siblings","nonSiblings"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\n\nimport \"./App.css\";\n\nconst CharDiv = styled.div`\n  width: 100vw;\n  height: 100vh;\n  padding: 60px;\n`;\n\nconst sizeData = { x: 450, y: 700 };\n\nexport const Home = ({ token }) => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n\n  const [mapData, setMapData] = useState(null);\n  // console.log(\"THE DATA \" + JSON.stringify(binaryData));\n\n  useEffect(async () => {\n    // const binaryData = await getBinaryTree();\n    const binaryData = await getBinaryTree();\n    // if (binaryData) {\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData)));\n    // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = { user_1: {} };\n    let unPlaced = [];\n\n    const data = await getTree();\n\n    console.log(JSON.stringify(data));\n\n    if (Array.isArray(data)) {\n      for (let j = data.length; j > 0; j--) {\n        // let placementStr = \"\";\n\n        // if (data[j].position === \"L\") {\n        //   placementStr = placementStr + \".1\";\n        // } else if (data[j].position === \"R\") {\n        //   placementStr = placementStr + \".2\";\n        // }\n\n        // let curUIDDrop = data[j].father;\n        // console.log(\"USER: \" + data[j].user_name.toUpperCase());\n        // while (curUIDDrop !== 1 && curUIDDrop !== 0 && curUIDDrop !== -1) {\n\n        //   for (let k = 1; k < data.length; k++) {\n        //     if (data[k].position !== null && data[k].father !== -1) {\n\n        //       if (data[k].id === curUIDDrop) {\n        //         console.log(\"MATCH: \" + JSON.stringify(data[k]));\n        //         if (data[k].position === \"L\") {\n        //           placementStr = placementStr + \".1\";\n        //         } else if (data[k].position === \"R\") {\n        //           placementStr = placementStr + \".2\";\n        //         }\n        //         curUIDDrop = data[k].father;\n        //         continue;\n        //       }\n\n        //     }\n        //   }\n\n        // }\n\n        // if (placementStr.charAt(0) == \".\") {\n        //   placementStr = placementStr.substring(1, placementStr.length);\n        // }\n\n        // placementStr = reverse(placementStr);\n        // console.log(\"PLACE MENT: \" + placementStr);\n\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n        let place = \"\";\n        let father = data[j].father;\n\n        if (data[j].position === \"L\") {\n          place = place + \".1\";\n        } else if (data[j].position === \"R\") {\n          place = place + \".2\";\n        }\n\n        while (father !== -1) {\n          let nexItem = data.find((x) => x.id === data[j].father);\n          if (nexItem.position === \"L\") {\n            if (nexItem.father === 1) {\n              place = place + \"1\";\n            } else place = place + \".1\";\n          } else if (nexItem.position === \"R\") {\n            if (nexItem.father === 1) {\n              place = place + \"1\";\n            } else place = place + \"2\";\n          }\n        }\n\n        place = reverse(place);\n\n        if (place.length > 0) {\n          constructTree[\"user_1\"][place] = data[j].user_name.toUpperCase();\n        }\n      }\n\n      console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n      return constructTree;\n    }\n  };\n\n  const renderNodeWithCustomEvents = ({ nodeDatum, toggleNode }) => {\n    return (\n      <g>\n        <foreignObject x=\"-150px\" height=\"500px\" width=\"500px\" y=\"-80px\">\n          <div\n            title={nodeDatum.fullName}\n            className=\"elemental-node\"\n            style={nodeDatum.style}\n          >\n            <span title={nodeDatum.fullName} className=\"elemental-name\">\n              {nodeDatum.shortName}\n            </span>\n            {nodeDatum.fullName === false && (\n              <div className=\"elemental-node--hover\">\n                <span>{nodeDatum.fullName}</span>\n              </div>\n            )}\n          </div>\n        </foreignObject>\n      </g>\n    );\n  };\n\n  return (\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    <React.Fragment>\n      {mapData !== null ? (\n        // <>\n\n        <div className=\"graph\">\n          <Tree\n            data={mapData.graph}\n            renderCustomNodeElement={(rd3tProps) =>\n              renderNodeWithCustomEvents({ ...rd3tProps })\n            }\n            orientation={\"verticle\"}\n            translate={mapData.translate}\n            zoom={0.2}\n            // pathFunc={straightPathFunc} //\"eblow\"\n            nodeSize={sizeData}\n            scaleExtent={{ min: 0.004, max: 1 }}\n            separation={{ siblings: 1, nonSiblings: 1.5 }}\n          />\n        </div>\n      ) : (\n        // </>\n        <h2>Loading</h2>\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}