{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/About.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`;\n_c = GridWrapper;\nexport default function About(_ref) {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const [mapData, setMapData] = useState(null); // console.log(\"THE DATA \" + JSON.stringify(binaryData));\n\n  useEffect(async () => {\n    // const binaryData = await getBinaryTree();\n    const binaryData = await getBinaryTree(); // if (binaryData) {\n\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData))); // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = {\n      user_1: {}\n    };\n    let unPlaced = [];\n    const data = await getTree();\n    console.log(data.length);\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {}\n\n      return constructTree;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(GridWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"About Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"State at ceiling lay on arms while you're using the keyboard so this human feeds me.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"I am a kitty cat, sup, feed me, no cares in the world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Meow meow, I tell my human purr for no reason but to chase after\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n\n_s(About, \"tfr58apwqtG+o1X9ZCcq3mb3/DM=\");\n\n_c2 = About;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GridWrapper\");\n$RefreshReg$(_c2, \"About\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/About.js"],"names":["React","styled","GridWrapper","div","About","token","mapData","setMapData","useState","useEffect","binaryData","getBinaryTree","GraphData","populateGraphData","JSON","stringify","getTree","fetch","method","headers","Authorization","then","data","json","constructTree","user_1","unPlaced","console","log","length","Array","isArray","j"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AACA,MAAMC,WAAW,GAAGD,MAAM,CAACE,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;KAAMD,W;AASN,eAAe,SAASE,KAAT,OAA0B;AAAA;;AAAA,MAAX;AAAEC,IAAAA;AAAF,GAAW;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBC,QAAQ,CAAC,IAAD,CAAtC,CADuC,CAEvC;;AAEAC,EAAAA,SAAS,CAAC,YAAY;AACpB;AACA,UAAMC,UAAU,GAAG,MAAMC,aAAa,EAAtC,CAFoB,CAGpB;;AACAJ,IAAAA,UAAU,CAACK,SAAS,CAACC,iBAAV,CAA4BC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAA5B,CAAD,CAAV,CAJoB,CAKpB;AACA;AACD,GAPQ,EAON,EAPM,CAAT;;AASA,iBAAeM,OAAf,GAAyB;AACvB,WAAOC,KAAK,CAAC,gDAAD,EAAmD;AAC7DC,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYf,KAAK,CAACA,KAD1B;AAEP,wBAAgB,mCAFT;AAGP,uCAA+B;AAHxB;AAFoD,KAAnD,CAAL,CAOJgB,IAPI,CAOEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAPX,CAAP;AAQD;;AAED,QAAMZ,aAAa,GAAG,YAAY;AAChC;AACA,QAAIa,aAAa,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAApB;AACA,QAAIC,QAAQ,GAAG,EAAf;AAEA,UAAMJ,IAAI,GAAG,MAAMN,OAAO,EAA1B;AAEAW,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACO,MAAjB;;AAEA,QAAIC,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;AACvB,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACO,MAAzB,EAAiCG,CAAC,EAAlC,EAAsC,CAErC;;AACD,aAAOR,aAAP;AACD;AACF,GAfD;;AAiBA,sBACE,QAAC,WAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GApDuBpB,K;;MAAAA,K","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nconst GridWrapper = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  margin-top: 1em;\n  margin-left: 6em;\n  margin-right: 6em;\n  grid-template-columns: repeat(12, 1fr);\n  grid-auto-rows: minmax(25px, auto);\n`;\nexport default function About({ token }) {\n  const [mapData, setMapData] = useState(null);\n  // console.log(\"THE DATA \" + JSON.stringify(binaryData));\n\n  useEffect(async () => {\n    // const binaryData = await getBinaryTree();\n    const binaryData = await getBinaryTree();\n    // if (binaryData) {\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData)));\n    // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = { user_1: {} };\n    let unPlaced = [];\n\n    const data = await getTree();\n\n    console.log(data.length);\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        \n      }\n      return constructTree;\n    }\n  };\n\n  return (\n    <GridWrapper>\n      <h2>About Page</h2>\n      <p>\n        State at ceiling lay on arms while you're using the keyboard so this\n        human feeds me.\n      </p>\n      <p>I am a kitty cat, sup, feed me, no cares in the world</p>\n      <p>Meow meow, I tell my human purr for no reason but to chase after</p>\n    </GridWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}