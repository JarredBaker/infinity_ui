{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\nconst sizeData = {\n  x: 450,\n  y: 700\n};\nexport const Home = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const [mapData, setMapData] = useState(null);\n  const binaryData = getBinaryTree(); // console.log(\"THE DATA \" + JSON.stringify(binaryData));\n\n  useEffect(async () => {\n    // const binaryData = await getBinaryTree();\n    // if (binaryData) {\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData))); // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = {\n      user_1: {}\n    };\n    let unPlaced = [];\n    const data = await getTree();\n    console.log(data.length);\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        let placementStr = \"\";\n\n        if (data[j].position === \"L\") {\n          placementStr = placementStr + \"1.\";\n        } else {\n          placementStr = placementStr + \"2.\";\n        }\n\n        let curUIDDrop = data[j].father;\n\n        while (curUIDDrop !== 1 && curUIDDrop !== 0) {\n          console.log(\"LOOPGIN: \" + curUIDDrop);\n\n          for (let k = 0; k < data.length; k++) {\n            if (data[k].id === curUIDDrop) {\n              if (data[k].position === \"L\") {\n                placementStr = placementStr + \"1.\";\n              } else {\n                placementStr = placementStr + \"2.\";\n              }\n\n              curUIDDrop = data[k].father;\n            }\n          } // break;\n\n        }\n\n        placementStr = placementStr + \"1\";\n        placementStr = reverse(placementStr);\n        console.log(\"PLACE MENT: \" + placementStr);\n\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        constructTree[\"user_1\"][placementStr] = data[j].user_name.toUpperCase();\n      }\n\n      console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n      return constructTree;\n    }\n  };\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const {\n      source,\n      target\n    } = linkDatum;\n    return orientation === \"horizontal\" ? `M${source.y},${source.x}L${target.y},${target.x}` : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  const renderNodeWithCustomEvents = _ref2 => {\n    let {\n      nodeDatum,\n      toggleNode\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: \"0\",\n        height: \"120px\",\n        width: \"500px\",\n        y: \"-60px\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          title: nodeDatum.fullName,\n          className: \"elemental-node\",\n          style: nodeDatum.style,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            title: nodeDatum.fullName,\n            className: \"elemental-name\",\n            children: nodeDatum.shortName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this), nodeDatum.fullName === false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elemental-node--hover\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: nodeDatum.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  };\n\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(React.Fragment, {\n      children: mapData !== null ?\n      /*#__PURE__*/\n      // <>\n      _jsxDEV(\"div\", {\n        className: \"graph\",\n        children: /*#__PURE__*/_jsxDEV(Tree, {\n          data: mapData.graph,\n          renderCustomNodeElement: rd3tProps => renderNodeWithCustomEvents({ ...rd3tProps\n          }),\n          orientation: \"verticle\",\n          translate: mapData.translate,\n          zoom: 0.2,\n          pathFunc: straightPathFunc //\"eblow\"\n          ,\n          nodeSize: sizeData,\n          scaleExtent: {\n            min: 0.004,\n            max: 1\n          },\n          separation: {\n            siblings: 1,\n            nonSiblings: 1.5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this) :\n      /*#__PURE__*/\n      // </>\n      _jsxDEV(\"h2\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Home, \"tfr58apwqtG+o1X9ZCcq3mb3/DM=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","useEffect","useState","styled","Tree","GraphData","render","Legion","CharDiv","div","sizeData","x","y","Home","token","mapData","setMapData","binaryData","getBinaryTree","populateGraphData","JSON","stringify","getTree","fetch","method","headers","Authorization","then","data","json","constructTree","user_1","unPlaced","console","log","length","Array","isArray","j","placementStr","position","curUIDDrop","father","k","id","reverse","s","split","join","user_name","toUpperCase","straightPathFunc","linkDatum","orientation","source","target","renderNodeWithCustomEvents","nodeDatum","toggleNode","fullName","style","shortName","graph","rd3tProps","translate","min","max","siblings","nonSiblings"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\n\nimport \"./App.css\";\n\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\n\nconst sizeData = { x: 450, y: 700 };\n\nexport const Home = ({ token }) => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n\n  const [mapData, setMapData] = useState(null);\n  const binaryData = getBinaryTree();\n  // console.log(\"THE DATA \" + JSON.stringify(binaryData));\n\n  useEffect(async () => {\n    // const binaryData = await getBinaryTree();\n    \n    // if (binaryData) {\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData)));\n    // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = { user_1: {} };\n    let unPlaced = [];\n\n    const data = await getTree();\n\n    console.log(data.length);\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        let placementStr = \"\";\n\n        if (data[j].position === \"L\") {\n          placementStr = placementStr + \"1.\";\n        } else {\n          placementStr = placementStr + \"2.\";\n        }\n\n        let curUIDDrop = data[j].father;\n        while (curUIDDrop !== 1 && curUIDDrop !== 0) {\n          console.log(\"LOOPGIN: \" + curUIDDrop);\n          for (let k = 0; k < data.length; k++) {\n            if (data[k].id === curUIDDrop) {\n              if (data[k].position === \"L\") {\n                placementStr = placementStr + \"1.\";\n              } else {\n                placementStr = placementStr + \"2.\";\n              }\n              curUIDDrop = data[k].father;\n            }\n          }\n          // break;\n        }\n\n        placementStr = placementStr + \"1\";\n        placementStr = reverse(placementStr);\n        console.log(\"PLACE MENT: \" + placementStr);\n\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        constructTree[\"user_1\"][placementStr] = data[j].user_name.toUpperCase();\n      }\n\n      console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n      return constructTree;\n    }\n  };\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const { source, target } = linkDatum;\n    return orientation === \"horizontal\"\n      ? `M${source.y},${source.x}L${target.y},${target.x}`\n      : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  const renderNodeWithCustomEvents = ({ nodeDatum, toggleNode }) => {\n    return (\n      <g>\n        <foreignObject x=\"0\" height=\"120px\" width=\"500px\" y=\"-60px\">\n          <div\n            title={nodeDatum.fullName}\n            className=\"elemental-node\"\n            style={nodeDatum.style}\n          >\n            <span title={nodeDatum.fullName} className=\"elemental-name\">\n              {nodeDatum.shortName}\n            </span>\n            {nodeDatum.fullName === false && (\n              <div className=\"elemental-node--hover\">\n                <span>{nodeDatum.fullName}</span>\n              </div>\n            )}\n          </div>\n        </foreignObject>\n      </g>\n    );\n  };\n\n  return (\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    <React.Fragment>\n      {mapData !== null ? (\n        // <>\n\n        <div className=\"graph\">\n          <Tree\n            data={mapData.graph}\n            renderCustomNodeElement={(rd3tProps) =>\n              renderNodeWithCustomEvents({ ...rd3tProps })\n            }\n            orientation={\"verticle\"}\n            translate={mapData.translate}\n            zoom={0.2}\n            pathFunc={straightPathFunc} //\"eblow\"\n            nodeSize={sizeData}\n            scaleExtent={{ min: 0.004, max: 1 }}\n            separation={{ siblings: 1, nonSiblings: 1.5 }}\n          />\n        </div>\n      ) : (\n        // </>\n        <h2>Loading</h2>\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}