{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sizeData = {\n  x: 450,\n  y: 700\n};\nexport const Home = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const [mapData, setMapData] = useState(null);\n  useEffect(async () => {\n    const binaryData = await getBinaryTree();\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData)));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = {\n      user_1: {}\n    };\n    const data = await getTree();\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        let placementStr = \"\";\n\n        if (data[j].position === \"L\") {\n          placementStr = placementStr + \".1\";\n        } else if (data[j].position === \"R\") {\n          placementStr = placementStr + \".2\";\n        }\n\n        let curUIDDrop = data[j].father;\n\n        while (curUIDDrop !== 1 && curUIDDrop !== 0 && curUIDDrop !== -1) {\n          for (let k = 1; k < data.length; k++) {\n            if (data[k].position !== null && data[k].father !== -1) {\n              if (data[k].id === curUIDDrop) {\n                if (data[k].position === \"L\") {\n                  placementStr = placementStr + \".1\";\n                } else if (data[k].position === \"R\") {\n                  placementStr = placementStr + \".2\";\n                }\n\n                curUIDDrop = data[k].father;\n                continue;\n              }\n            }\n          }\n        }\n\n        if (placementStr.charAt(0) == \".\") {\n          placementStr = placementStr.substring(1, placementStr.length);\n        }\n\n        placementStr = reverse(placementStr);\n\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        if (placementStr.length > 0) {\n          constructTree[\"user_1\"][placementStr] = data[j].user_name.toUpperCase();\n        }\n      }\n\n      const ordered = Object.keys(constructTree[\"user_1\"]).sort().reduce((obj, key) => {\n        obj[key] = constructTree[\"user_1\"][key];\n        return obj;\n      }, {});\n      let res = {\n        user_1: ordered\n      };\n      return res;\n    }\n  };\n\n  const renderNodeWithCustomEvents = _ref2 => {\n    let {\n      nodeDatum,\n      toggleNode\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: \"-150px\",\n        height: \"500px\",\n        width: \"500px\",\n        y: \"-80px\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          title: nodeDatum.fullName,\n          className: \"elemental-node\",\n          style: nodeDatum.style,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            title: nodeDatum.fullName,\n            className: \"elemental-name\",\n            children: nodeDatum.shortName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), nodeDatum.fullName === false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elemental-node--hover\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: nodeDatum.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: mapData !== null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph\",\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: mapData.graph,\n        renderCustomNodeElement: rd3tProps => renderNodeWithCustomEvents({ ...rd3tProps\n        }),\n        orientation: \"verticle\",\n        translate: mapData.translate,\n        zoom: 0.2,\n        nodeSize: sizeData,\n        scaleExtent: {\n          min: 0.004,\n          max: 1\n        },\n        separation: {\n          siblings: 1,\n          nonSiblings: 1.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"tfr58apwqtG+o1X9ZCcq3mb3/DM=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","useEffect","useState","Tree","GraphData","sizeData","x","y","Home","token","mapData","setMapData","binaryData","getBinaryTree","populateGraphData","JSON","stringify","getTree","fetch","method","headers","Authorization","then","data","json","constructTree","user_1","Array","isArray","j","length","placementStr","position","curUIDDrop","father","k","id","charAt","substring","reverse","s","split","join","user_name","toUpperCase","ordered","Object","keys","sort","reduce","obj","key","res","renderNodeWithCustomEvents","nodeDatum","toggleNode","fullName","style","shortName","graph","rd3tProps","translate","min","max","siblings","nonSiblings"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\n\nimport \"./App.css\";\n\nconst sizeData = { x: 450, y: 700 };\n\nexport const Home = ({ token }) => {\n  const [mapData, setMapData] = useState(null);\n\n  useEffect(async () => {\n    const binaryData = await getBinaryTree();\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData)));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = { user_1: {} };\n    const data = await getTree();\n\n    if (Array.isArray(data)) {\n      for (let j = 1; j < data.length; j++) {\n        let placementStr = \"\";\n\n        if (data[j].position === \"L\") {\n          placementStr = placementStr + \".1\";\n        } else if (data[j].position === \"R\") {\n          placementStr = placementStr + \".2\";\n        }\n\n        let curUIDDrop = data[j].father;\n\n        while (curUIDDrop !== 1 && curUIDDrop !== 0 && curUIDDrop !== -1) {\n          for (let k = 1; k < data.length; k++) {\n            if (data[k].position !== null && data[k].father !== -1) {\n              if (data[k].id === curUIDDrop) {\n                if (data[k].position === \"L\") {\n                  placementStr = placementStr + \".1\";\n                } else if (data[k].position === \"R\") {\n                  placementStr = placementStr + \".2\";\n                }\n                curUIDDrop = data[k].father;\n                continue;\n              }\n            }\n          }\n        }\n\n        if (placementStr.charAt(0) == \".\") {\n          placementStr = placementStr.substring(1, placementStr.length);\n        }\n\n        placementStr = reverse(placementStr);\n        function reverse(s) {\n          return s.split(\"\").reverse().join(\"\");\n        }\n\n        if (placementStr.length > 0) {\n          constructTree[\"user_1\"][placementStr] =\n            data[j].user_name.toUpperCase();\n        }\n      }\n\n      const ordered = Object.keys(constructTree[\"user_1\"])\n        .sort()\n        .reduce((obj, key) => {\n          obj[key] = constructTree[\"user_1\"][key];\n          return obj;\n        }, {});\n      let res = { user_1: ordered };\n      return res;\n    }\n  };\n\n  const renderNodeWithCustomEvents = ({ nodeDatum, toggleNode }) => {\n    return (\n      <g>\n        <foreignObject x=\"-150px\" height=\"500px\" width=\"500px\" y=\"-80px\">\n          <div\n            title={nodeDatum.fullName}\n            className=\"elemental-node\"\n            style={nodeDatum.style}\n          >\n            <span title={nodeDatum.fullName} className=\"elemental-name\">\n              {nodeDatum.shortName}\n            </span>\n            {nodeDatum.fullName === false && (\n              <div className=\"elemental-node--hover\">\n                <span>{nodeDatum.fullName}</span>\n              </div>\n            )}\n          </div>\n        </foreignObject>\n      </g>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      {mapData !== null ? (\n        <div className=\"graph\">\n          <Tree\n            data={mapData.graph}\n            renderCustomNodeElement={(rd3tProps) =>\n              renderNodeWithCustomEvents({ ...rd3tProps })\n            }\n            orientation={\"verticle\"}\n            translate={mapData.translate}\n            zoom={0.2}\n            nodeSize={sizeData}\n            scaleExtent={{ min: 0.004, max: 1 }}\n            separation={{ siblings: 1, nonSiblings: 1.5 }}\n          />\n        </div>\n      ) : (\n        <h2>Loading</h2>\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}