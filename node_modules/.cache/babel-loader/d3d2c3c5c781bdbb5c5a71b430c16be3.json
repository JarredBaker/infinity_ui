{"ast":null,"code":"var _jsxFileName = \"/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\nconst sizeData = {\n  x: 450,\n  y: 700\n};\nexport const Home = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n  const [mapData, setMapData] = useState(null);\n  useEffect(async () => {\n    const binaryData = await getBinaryTree();\n    console.log(\"THE DATA \" + JSON.stringify(binaryData)); // if (binaryData) {\n\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData))); // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    }).then(data => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = {\n      \"user_1\": {}\n    };\n    let unPlaced = [];\n    const data = await getTree();\n\n    if (Array.isArray(data)) {\n      for (let i = 1; i < data.length; i++) {\n        let uID = data[i - 1].id;\n\n        for (let j = 1; j < data.length - 1; j++) {\n          if (data[j - 1].position === \"L\" && data[j - 1].father === uID) {\n            constructTree[\"user_1\"][data[j - 1].father + \".1\"] = data[j - 1].user_name.toUpperCase();\n          } else if (data[i - 1].position === \"R\" && data[j - 1].father === uID) {\n            constructTree[\"user_1\"][data[j - 1].father + \".2\"] = data[j - 1].user_1.toUpperCase();\n          }\n        }\n      }\n\n      console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n      return constructTree; // console.log(\"UNPLACED : \" + JSON.stringify(unPlaced));\n    }\n  };\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const {\n      source,\n      target\n    } = linkDatum;\n    return orientation === \"horizontal\" ? `M${source.y},${source.x}L${target.y},${target.x}` : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  const renderNodeWithCustomEvents = _ref2 => {\n    let {\n      nodeDatum,\n      toggleNode\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(\"g\", {\n      children: /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        x: \"0\",\n        height: \"120px\",\n        width: \"500px\",\n        y: \"-60px\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          title: nodeDatum.fullName,\n          className: \"elemental-node\",\n          style: nodeDatum.style,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            title: nodeDatum.fullName,\n            className: \"elemental-name\",\n            children: nodeDatum.shortName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), nodeDatum.fullName === false && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"elemental-node--hover\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: nodeDatum.fullName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  };\n\n  return (\n    /*#__PURE__*/\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    _jsxDEV(React.Fragment, {\n      children: mapData !== null ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph\",\n          children: /*#__PURE__*/_jsxDEV(Tree, {\n            data: mapData.graph,\n            renderCustomNodeElement: rd3tProps => renderNodeWithCustomEvents({ ...rd3tProps\n            }),\n            orientation: \"verticle\",\n            translate: mapData.translate,\n            zoom: mapData.defaultZoom,\n            pathFunc: straightPathFunc //\"eblow\"\n            ,\n            nodeSize: sizeData,\n            scaleExtent: {\n              min: mapData.defaultZoom,\n              max: 1\n            },\n            separation: {\n              siblings: 1,\n              nonSiblings: 1.5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n_s(Home, \"tfr58apwqtG+o1X9ZCcq3mb3/DM=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/jarredbaker/Desktop/infinityProj/infinity_ui/src/Home.js"],"names":["React","useEffect","useState","styled","Tree","GraphData","render","Legion","CharDiv","div","sizeData","x","y","Home","token","mapData","setMapData","binaryData","getBinaryTree","console","log","JSON","stringify","populateGraphData","getTree","fetch","method","headers","Authorization","then","data","json","constructTree","unPlaced","Array","isArray","i","length","uID","id","j","position","father","user_name","toUpperCase","user_1","straightPathFunc","linkDatum","orientation","source","target","renderNodeWithCustomEvents","nodeDatum","toggleNode","fullName","style","shortName","graph","rd3tProps","translate","defaultZoom","min","max","siblings","nonSiblings"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,OAAO,WAAP;;;AAEA,MAAMC,OAAO,GAAGL,MAAM,CAACM,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;AAsBA,MAAMC,QAAQ,GAAG;AAAEC,EAAAA,CAAC,EAAE,GAAL;AAAUC,EAAAA,CAAC,EAAE;AAAb,CAAjB;AAEA,OAAO,MAAMC,IAAI,GAAG,QAAe;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACjC;AACA;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMgB,UAAU,GAAG,MAAMC,aAAa,EAAtC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAcC,IAAI,CAACC,SAAL,CAAeL,UAAf,CAA1B,EAFoB,CAGpB;;AACAD,IAAAA,UAAU,CAACX,SAAS,CAACkB,iBAAV,CAA4BF,IAAI,CAACC,SAAL,CAAeL,UAAf,CAA5B,CAAD,CAAV,CAJoB,CAKpB;AACA;AACD,GAPQ,EAON,EAPM,CAAT;;AASA,iBAAeO,OAAf,GAAyB;AACvB,WAAOC,KAAK,CAAC,gDAAD,EAAmD;AAC7DC,MAAAA,MAAM,EAAE,KADqD;AAE7DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYd,KAAK,CAACA,KAD1B;AAEP,wBAAgB,mCAFT;AAGP,uCAA+B;AAHxB;AAFoD,KAAnD,CAAL,CAOJe,IAPI,CAOEC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAPX,CAAP;AAQD;;AAED,QAAMb,aAAa,GAAG,YAAY;AAChC;AACA,QAAIc,aAAa,GAAG;AAAE,gBAAU;AAAZ,KAApB;AACA,QAAIC,QAAQ,GAAG,EAAf;AAEA,UAAMH,IAAI,GAAG,MAAMN,OAAO,EAA1B;;AAEA,QAAIU,KAAK,CAACC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvB,WAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,YAAIE,GAAG,GAAGR,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYG,EAAtB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACO,MAAL,GAAc,CAAlC,EAAqCG,CAAC,EAAtC,EAA0C;AACxC,cAAIV,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYC,QAAZ,KAAyB,GAAzB,IAAgCX,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYE,MAAZ,KAAuBJ,GAA3D,EAAgE;AAC9DN,YAAAA,aAAa,CAAC,QAAD,CAAb,CAAwBF,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYE,MAAZ,GAAqB,IAA7C,IACEZ,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYG,SAAZ,CAAsBC,WAAtB,EADF;AAED,WAHD,MAGO,IAAId,IAAI,CAACM,CAAC,GAAG,CAAL,CAAJ,CAAYK,QAAZ,KAAyB,GAAzB,IAAgCX,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYE,MAAZ,KAAuBJ,GAA3D,EAAgE;AACrEN,YAAAA,aAAa,CAAC,QAAD,CAAb,CAAwBF,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYE,MAAZ,GAAqB,IAA7C,IACEZ,IAAI,CAACU,CAAC,GAAG,CAAL,CAAJ,CAAYK,MAAZ,CAAmBD,WAAnB,EADF;AAED;AACF;AACF;;AAEDzB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBC,IAAI,CAACC,SAAL,CAAeU,aAAf,CAA5B;AACA,aAAOA,aAAP,CAhBuB,CAkBvB;AACD;AACF,GA3BD;;AA6BA,QAAMc,gBAAgB,GAAG,CAACC,SAAD,EAAYC,WAAZ,KAA4B;AACnD,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqBH,SAA3B;AACA,WAAOC,WAAW,KAAK,YAAhB,GACF,IAAGC,MAAM,CAACrC,CAAE,IAAGqC,MAAM,CAACtC,CAAE,IAAGuC,MAAM,CAACtC,CAAE,IAAGsC,MAAM,CAACvC,CAAE,EAD9C,GAEF,IAAGsC,MAAM,CAACtC,CAAE,IAAGsC,MAAM,CAACrC,CAAE,IAAGsC,MAAM,CAACvC,CAAE,IAAGuC,MAAM,CAACtC,CAAE,EAFrD;AAGD,GALD;;AAOA,QAAMuC,0BAA0B,GAAG,SAA+B;AAAA,QAA9B;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAA8B;AAChE,wBACE;AAAA,6BACE;AAAe,QAAA,CAAC,EAAC,GAAjB;AAAqB,QAAA,MAAM,EAAC,OAA5B;AAAoC,QAAA,KAAK,EAAC,OAA1C;AAAkD,QAAA,CAAC,EAAC,OAApD;AAAA,+BACE;AACE,UAAA,KAAK,EAAED,SAAS,CAACE,QADnB;AAEE,UAAA,SAAS,EAAC,gBAFZ;AAGE,UAAA,KAAK,EAAEF,SAAS,CAACG,KAHnB;AAAA,kCAKE;AAAM,YAAA,KAAK,EAAEH,SAAS,CAACE,QAAvB;AAAiC,YAAA,SAAS,EAAC,gBAA3C;AAAA,sBACGF,SAAS,CAACI;AADb;AAAA;AAAA;AAAA;AAAA,kBALF,EAQGJ,SAAS,CAACE,QAAV,KAAuB,KAAvB,iBACC;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,mCACE;AAAA,wBAAOF,SAAS,CAACE;AAAjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD,GArBD;;AAuBA;AAAA;AACE;AACA,YAAC,KAAD,CAAO,QAAP;AAAA,gBACGvC,OAAO,KAAK,IAAZ,gBACC;AAAA,+BAIE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,iCACE,QAAC,IAAD;AACE,YAAA,IAAI,EAAEA,OAAO,CAAC0C,KADhB;AAEE,YAAA,uBAAuB,EAAGC,SAAD,IACvBP,0BAA0B,CAAC,EAAE,GAAGO;AAAL,aAAD,CAH9B;AAKE,YAAA,WAAW,EAAE,UALf;AAME,YAAA,SAAS,EAAE3C,OAAO,CAAC4C,SANrB;AAOE,YAAA,IAAI,EAAE5C,OAAO,CAAC6C,WAPhB;AAQE,YAAA,QAAQ,EAAEd,gBARZ,CAQ8B;AAR9B;AASE,YAAA,QAAQ,EAAEpC,QATZ;AAUE,YAAA,WAAW,EAAE;AAAEmD,cAAAA,GAAG,EAAE9C,OAAO,CAAC6C,WAAf;AAA4BE,cAAAA,GAAG,EAAE;AAAjC,aAVf;AAWE,YAAA,UAAU,EAAE;AAAEC,cAAAA,QAAQ,EAAE,CAAZ;AAAeC,cAAAA,WAAW,EAAE;AAA5B;AAXd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAJF,uBADD,gBAsBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAvBJ;AAAA;AAAA;AAAA;AAAA;AAFF;AA6BD,CAjHM;;GAAMnD,I;;KAAAA,I","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Tree from \"react-d3-tree\";\nimport { GraphData } from \"./graphData\";\nimport { render } from \"react-dom\";\nimport Legion from \"./legion\";\n\nimport \"./App.css\";\n\nconst CharDiv = styled.div`\nwidth: 100vw;\nheight: 100vh;\npadding: 60px;\n\n.node__root > circle {\n    fill: blue;\n    r: 30;\n    border-radius: 3px;\n  }\n  \n  .node__branch > circle {\n    fill: yellow;\n  }\n  \n  .node__leaf > circle {\n    fill: green\n    /* Let's also make the radius of leaf nodes larger */\n    r: 40;\n  }\n`;\n\nconst sizeData = { x: 450, y: 700 };\n\nexport const Home = ({ token }) => {\n  // This is a simplified example of an org chart with a depth of 2.\n  // Note how deeper levels are defined recursively via the `children` property.\n\n  const [mapData, setMapData] = useState(null);\n  useEffect(async () => {\n    const binaryData = await getBinaryTree();\n    console.log(\"THE DATA \" + JSON.stringify(binaryData));\n    // if (binaryData) {\n    setMapData(GraphData.populateGraphData(JSON.stringify(binaryData)));\n    // }\n    // console.log(\"THE MAP DATA: \" + JSON.stringify(mapData));\n  }, []);\n\n  async function getTree() {\n    return fetch(\"http://localhost:8080/api/get_child_node_users\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + token.token,\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Access-Control-Allow-Origin\": \"*\",\n      },\n    }).then((data) => data.json());\n  }\n\n  const getBinaryTree = async () => {\n    // TODO: remove hard coded parent node.\n    let constructTree = { \"user_1\": {} };\n    let unPlaced = [];\n\n    const data = await getTree();\n\n    if (Array.isArray(data)) {\n      for (let i = 1; i < data.length; i++) {\n        let uID = data[i - 1].id;\n\n        for (let j = 1; j < data.length - 1; j++) {\n          if (data[j - 1].position === \"L\" && data[j - 1].father === uID) {\n            constructTree[\"user_1\"][data[j - 1].father + \".1\"] =\n              data[j - 1].user_name.toUpperCase();\n          } else if (data[i - 1].position === \"R\" && data[j - 1].father === uID) {\n            constructTree[\"user_1\"][data[j - 1].father + \".2\"] =\n              data[j - 1].user_1.toUpperCase();\n          }\n        }\n      }\n\n      console.log(\"THE TREE : \" + JSON.stringify(constructTree));\n      return constructTree;\n\n      // console.log(\"UNPLACED : \" + JSON.stringify(unPlaced));\n    }\n  };\n\n  const straightPathFunc = (linkDatum, orientation) => {\n    const { source, target } = linkDatum;\n    return orientation === \"horizontal\"\n      ? `M${source.y},${source.x}L${target.y},${target.x}`\n      : `M${source.x},${source.y}L${target.x},${target.y}`;\n  };\n\n  const renderNodeWithCustomEvents = ({ nodeDatum, toggleNode }) => {\n    return (\n      <g>\n        <foreignObject x=\"0\" height=\"120px\" width=\"500px\" y=\"-60px\">\n          <div\n            title={nodeDatum.fullName}\n            className=\"elemental-node\"\n            style={nodeDatum.style}\n          >\n            <span title={nodeDatum.fullName} className=\"elemental-name\">\n              {nodeDatum.shortName}\n            </span>\n            {nodeDatum.fullName === false && (\n              <div className=\"elemental-node--hover\">\n                <span>{nodeDatum.fullName}</span>\n              </div>\n            )}\n          </div>\n        </foreignObject>\n      </g>\n    );\n  };\n\n  return (\n    // `<Tree />` will fill width/height of its container; in this case `#treeWrapper`.\n    <React.Fragment>\n      {mapData !== null ? (\n        <>\n          {/* <div className=\"graph-legion\">\n            <Legion />\n          </div> */}\n          <div className=\"graph\">\n            <Tree\n              data={mapData.graph}\n              renderCustomNodeElement={(rd3tProps) =>\n                renderNodeWithCustomEvents({ ...rd3tProps })\n              }\n              orientation={\"verticle\"}\n              translate={mapData.translate}\n              zoom={mapData.defaultZoom}\n              pathFunc={straightPathFunc} //\"eblow\"\n              nodeSize={sizeData}\n              scaleExtent={{ min: mapData.defaultZoom, max: 1 }}\n              separation={{ siblings: 1, nonSiblings: 1.5 }}\n            />\n          </div>\n        </>\n      ) : (\n        <h2>Loading</h2>\n      )}\n    </React.Fragment>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}